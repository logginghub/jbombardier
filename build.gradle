/*
 * Copyright (c) 2009-2015 Vertex Labs Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.hidetake.ssh' version '1.0.1'
}

subprojects {

    group = 'com.jbombardier'
    version = '1.4.6'

    apply plugin: 'java'
    apply plugin: 'distribution'
    apply plugin: 'maven'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://www.vertexlabs.co.uk/repository"
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// jshaw - workaround to fix the intellij resource copying bug
//
    task copyTestResources(type: Copy) {
        from "${projectDir}/src/test/resources"
        into "${buildDir}/classes/test"
    }
    processTestResources.dependsOn copyTestResources
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    File distribution = new File(projectDir, "dist");

    task copyDist(type: Copy) {
        from 'dist'
        into file('build/dist_temp')
    }

    task updateWrapperClasspath(dependsOn: copyDist) << {
        StringBuilder classpath = new StringBuilder();
        int counter = 1;
        classpath.append("wrapper.java.classpath.${counter++}=../lib/${jar.archivePath.name}\n")
        sourceSets.main.runtimeClasspath.collect {
            classpath.append("wrapper.java.classpath.${counter++}=../lib/" + it.name + "\n")
        }
        classpath.append("wrapper.java.classpath.${counter++}=../lib/wrapper.jar\n")

        ant.replace(file: "build/dist_temp/${getProject().name}/conf/wrapper.conf", token: 'wrapper.java.classpath.1=../lib/*', value: classpath)
        ant.replace(file: "build/dist_temp/${getProject().name}/conf/wrapper.conf", token: 'wrapper.logfile=', value: 'wrapper.logfile=../logs/agent.wrapper.log')
    }

    if (!distribution.exists()) {
        copyDist.enabled = false;
        updateWrapperClasspath.enabled = false;
    } else {
        distZip.dependsOn("updateWrapperClasspath")
    }

    build.dependsOn("distZip")

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

    remotes {
        hosting {
            host = 'www.vertexlabs.co.uk'
            user = 'mavenrepo'
            identity = file(System.properties['user.home'] + "/.ssh/id_rsa")
        }
    }

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "scp://mavenrepo@www.vertexlabs.co.uk:/var/www/repository") {
                authentication(userName: "mavenrepo", privateKey: System.properties['user.home'] + "/.ssh/id_rsa")
            }
        }
    }
}